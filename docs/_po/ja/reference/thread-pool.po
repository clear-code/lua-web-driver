msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: web-driver.ThreadPool\n"
"---"
msgstr ""

msgid "# `web-driver.ThreadPool` class"
msgstr "# `web-driver.ThreadPool` クラス"

msgid "## Summary"
msgstr "## 概要"

msgid "It's a class for handling a thread pool."
msgstr "スレッドプールを制御するためのクラスです。"

msgid "This class make thread pool and a job queue and assign a job to thread."
msgstr "このクラスは、スレッドプールとジョブキューを作成し、ジョブをスレッドに割り当てます。"

msgid "## Class methods"
msgstr "## クラスメソッド"

msgid ""
"### `web-driver.ThreadPool.new(consumer, options) -> web-driver.ThreadPool` {#"
"new}"
msgstr ""

msgid "`consumer`: Specify a function to execute a job."
msgstr "`consumer`: ジョブを実行する関数を指定します。"

msgid "`options`: Specify thread pool options."
msgstr "`options`: スレッドプールのオプションを指定します。"

msgid "It create new [`web-driver.ThreadPool`][thread-pool] object."
msgstr "[`web-driver.ThreadPool`][thread-pool]オブジェクトを新しく作成します。"

msgid "You can specify options as below."
msgstr "以下のオプションを指定できます。"

msgid ""
"* `options.size`: Specify thread pool size as a number. The default value is 4"
".\n"
"* `options.logger`: Specify [`Logger`][logger] object.\n"
"* `options.max_n_failures`: Specify max number of job failures as a number. A "
"job is retried until this number of times. The default value is 3.\n"
"* `options.unique_job`: Specify whether allow duplicate a job or not as a bool"
"ean. The default value is true.\n"
"  * If you set false, you can register duplicate job.\n"
"* `options.finish_on_empty`: Specify whether end thread or not when jobs are e"
"mpty as a boolean. The default value is true.\n"
"  * If you set false, a thread doesn't end even when jobs are empty."
msgstr ""
"* `options.size`: スレッドプールのサイズを数値で指定します。デフォルト値は、4です。\n"
"* `options.logger`: [`Logger`][logger]オブジェクトを指定します。\n"
"* `options.max_n_failures`: ジョブの失敗回数の最大を指定します。この回数までジョブを再試行します。デフォルト値は3です。\n"
"* `options.unique_job`: ジョブの重複を許すかどうかをブール値として指定します。デフォルト値はtrueです。\n"
"  * falseを指定した場合は、重複したジョブを登録できます。\n"
"* `options.finish_on_empty`: ジョブが空になった時スレッドを終了するかどうかを指定します。デフォルト値は、trueです。\n"
"  * falseを設定した場合は、ジョブが空になってもスレッドは終了しません。"

msgid "## Instance methods"
msgstr "## インスタンスメソッド"

msgid "### `push(task) -> void` {#push}"
msgstr ""

msgid "`task`: Specify a job to register."
msgstr "`task`: 登録するジョブを指定します。"

msgid ""
"This method register a job in a queue. For example, we recommend specifying UR"
"L of a website to crawl to a job to register."
msgstr "このメソッドは、ジョブをキューに登録します。例えば、登録するジョブにはクロールするWebサイトのURLを指定することをおすすめします。"

msgid ""
"You can reference registered a job wiht `context.job` in `consumer` of argumen"
"t of [`web-driver.ThreadPool.new()`][thread-pool-new] as below."
msgstr ""
"登録したジョブは、以下のように[`web-driver.ThreadPool.new()`][thread-pool-new]の引数の`consumer`内"
"で、`context.job`で参照できます。"

msgid "Example:"
msgstr "例:"

msgid ""
"```lua\n"
"local web_driver = require(\"web-driver\")\n"
"local log = require(\"log\")"
msgstr ""

msgid ""
"if #arg < 1 then\n"
"  print(string.format(\"Usage: %s URL [LOG_LEVEL] [N_THREADS]\", arg[0]))\n"
"  os.exit(1)\n"
"end"
msgstr ""

msgid "print(\"LuaWebDriver: \" .. web_driver.VERSION)"
msgstr ""

msgid ""
"local url = arg[1]\n"
"local log_level = arg[2] or \"notice\"\n"
"local n_threads = arg[3]\n"
"if n_threads then\n"
"  n_threads = tonumber(n_threads)\n"
"end\n"
"if n_threads == nil or n_threads < 1 then\n"
"  n_threads = 2\n"
"end"
msgstr ""

msgid ""
"local logger = log.new(log_level)\n"
"local function crawler(context)\n"
"  local logger = context.logger\n"
"  local session = context.session\n"
"  local url = context.job\n"
"  local prefix = url:match(\"^https?://[^/]+/\")\n"
"  logger:debug(\"Opening...: \" .. url)\n"
"  session:navigate_to(url)\n"
"  local status_code = session:status_code()\n"
"  if status_code and status_code ~= 200 then\n"
"    logger:notice(string.format(\"%s: Error: %d\",\n"
"                                url,\n"
"                                status_code))\n"
"    return\n"
"  end\n"
"  logger:notice(string.format(\"%s: Title: %s\",\n"
"                              url,\n"
"                              session:title()))\n"
"  local anchors = session:css_select(\"a\")\n"
"  local anchor\n"
"  for _, anchor in pairs(anchors) do\n"
"    local href = anchor.href\n"
"    local normalized_href = href:gsub(\"#.*$\", \"\")\n"
"    logger:notice(string.format(\"%s: Link: %s (%s): %s\",\n"
"                                url,\n"
"                                href,\n"
"                                normalized_href,\n"
"                                anchor:text()))\n"
"    if normalized_href:sub(1, #prefix) == prefix then\n"
"      context.job_pusher:push(normalized_href)\n"
"    end\n"
"  end\n"
"end\n"
"local options = {\n"
"  logger = logger,\n"
"  size = n_threads,\n"
"}\n"
"local pool = web_driver.ThreadPool.new(crawler, options)\n"
"logger.debug(\"Start crawling: \" .. url)\n"
"pool:push(url)\n"
"pool:join()\n"
"logger.debug(\"Done crawling: \" .. url)\n"
"```"
msgstr ""

msgid "### `join() -> void` {#join}"
msgstr ""

msgid ""
"This method start thread and execute `consumer` of argument of [`web-driver.Th"
"readPool.new()`][thread-pool-new].\n"
"This method executes also end processing of each thread."
msgstr ""
"このメソッドは、スレッドを開始し、[`web-driver.ThreadPool.new()`][thread-pool-new]の引数の`consumer"
"`を実行します。\n"
"このメソッドは、各スレッドの終了処理も実行します。"

msgid "So, this method returns when finished execute of all thread."
msgstr "したがって、このメソッドは、全てのスレッドの実行が終了した時に戻ります。"

msgid "[thread-pool]: thread-pool.html"
msgstr ""

msgid "[thread-pool-new]: thread-pool.html#new"
msgstr ""

msgid "[logger]: ../tutorial/#logger"
msgstr ""

msgid "[session-delete]: session.html#delete"
msgstr ""

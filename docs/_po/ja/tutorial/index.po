msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: Tutorial\n"
"---"
msgstr ""
"---\n"
"title: チュートリアル\n"
"---"

msgid "# Tutorial"
msgstr "# チュートリアル"

msgid ""
"This document describes how to use LuaWebDriver step by step. If you don't ins"
"tall LuaWebDriver yet, [install][install] LuaWebDriver before you read this do"
"cument."
msgstr ""
"このドキュメントは、LuaWebDriverの使い方を段階的に説明しています。まだ、LuaWebDriverを[インストール][install]していない場"
"合は、このドキュメントを読む前にLuaWebDriverを[インストール][install]してください。"

msgid "## Visit to a website {#visit-to-website}"
msgstr "## Webサイトへのアクセス"

msgid ""
"You can use [`Session:navigate_to`][session-navigate-to] to visit a specific w"
"ebsite with the web browser."
msgstr "[`Session:navigate_to`][session-navigate-to]を使って、Webブラウザーで特定のWebサイトへアクセスできます。"

msgid ""
"First of all, you make a callback function for visit to a website.\n"
"You specify the URL as the argument of [`Session:navigate_to`][session-navigat"
"e-to]"
msgstr ""
"まず最初に、Webサイトへアクセスするためのコールバック関数を作成します。\n"
"[`Session:navigate_to`][session-navigate-to]の引数としてURLを指定します。"

msgid ""
"Second, you specify your callback as the argument of [`Firefox:start_session`]"
"[firefox-start-session] and call [`Firefox:start_session`][firefox-start-sessi"
"on].\n"
"the session is destroyed auto after calling your callback."
msgstr ""
"次に、[`Firefox:start_session`][firefox-start-session]の引数としてコールバックを指定し、[`Firefox:"
"start_session`][firefox-start-session]を呼び出します。\n"
"セッションはコールバックを呼び出した後、自動的に破棄されます。"

msgid "Example:"
msgstr "例:"

msgid ""
"```lua\n"
"local web_driver = require(\"web-driver\")\n"
"local driver = web_driver.Firefox.new()"
msgstr ""

msgid "local URL = \"https://clear-code.gitlab.io/lua-web-driver/sample/\""
msgstr ""

msgid ""
"-- Make your callback and start session\n"
"driver:start_session(function(session)\n"
"  session:navigate_to(URL)\n"
"end)\n"
"```"
msgstr ""
"-- コールバックの作成とセッションの開始\n"
"driver:start_session(function(session)\n"
"  session:navigate_to(URL)\n"
"end)\n"
"```"

msgid "## Serialize to website {#serialize-to-website}"
msgstr "## Wbeサイトのシリアライズ {#serialize-to-website}"

msgid "You can use [`Session:xml`][session-xml] to serialize a website as XML."
msgstr "[`Session:xml`][session-xml]を使ってWebサイトをXMLとしてシリアライズできます。"

msgid "First of all, you visit to a website to serialize as below example."
msgstr "まずはじめに、以下の例のようにシリアライズするWebサイトへアクセスします。"

msgid "Second, you call [`Session:xml`][session-xml]."
msgstr "次に、[`Session:xml`][session-xml]を呼び出します。"

msgid ""
"Then you can serialize a current website as XML.\n"
"You can use this XML as Lua's string."
msgstr "そうすると、現在のWebサイトをXMLとしてシリアライズできます。このXMLはLuaの文字列として使えます。"

msgid ""
"local URL =\n"
"  \"https://clear-code.gitlab.io/lua-web-driver/sample/\""
msgstr ""

msgid ""
"-- Make your callback and start session\n"
"driver:start_session(function(session)\n"
"  session:navigate_to(URL)\n"
"-- Serialize a current website as XML.\n"
"  local xml = session:xml()\n"
"  print(xml)\n"
"end)\n"
"```"
msgstr ""
"-- コールバックの作成とセッションの開始\n"
"driver:start_session(function(session)\n"
"  session:navigate_to(URL)\n"
"-- 現在のWebサイトをXMLとしてシリアライズする\n"
"  local xml = session:xml()\n"
"  print(xml)\n"
"end)\n"
"```"

msgid "## Save a screenshot {#save-screenshot}"
msgstr "## スクリーンショットの取得 {#save-screenshot}"

msgid ""
"You can use [`Session:save_screenshot`][session-save-screenshot] to save a scr"
"eenshot of current website.\n"
"The screenshot is saved in PNG format."
msgstr ""
"[`Session:save_screenshot`][session-save-screenshot]を使って現在のWebサイトのスクリーンショットを取得"
"できます。\n"
"スクリーンショットは、PNG形式で取得されます。"

msgid "First of all, you visit to a website to save a screenshot as below example."
msgstr "まずはじめに、以下の例のようにスクリーンショットを取得するWebサイトへアクセスします。"

msgid "second, you call [`Session:save_screenshot`][session-save-screenshot]."
msgstr "次に、[`Session:save_screenshot`][session-save-screenshot]を呼び出します。"

msgid ""
"driver:start_session(function(session)\n"
"  session:navigate_to(URL)\n"
"-- Save screenshot in PNG format\n"
"  session:save_screenshot(\"sample.png\")\n"
"end)\n"
"```"
msgstr ""
"driver:start_session(function(session)\n"
"  session:navigate_to(URL)\n"
"-- PNG形式でスクリーンショットを保存します\n"
"  session:save_screenshot(\"sample.png\")\n"
"end)\n"
"```"

msgid "## Move on website {#move-on-website}"
msgstr "## Webサイトの移動 {#move-on-website}"

msgid "You can move on a website with below features."
msgstr "以下の機能を使って、Webサイトの移動ができます。"

msgid ""
"* Button operation\n"
"* Checkbox operation\n"
"* Click link"
msgstr ""
"* ボタン操作\n"
"* チェックボックス操作\n"
"* リンククリック"

msgid "In this example take turns at login and link click, get a text."
msgstr "この例では、ログインして、リンクをクリックしてテキストを取得します。"

msgid "First of all, you visit a target website."
msgstr "まず最初に、対象のWebサイトへアクセスします。"

msgid ""
"Second, you input user name and password, because of this the web site needs a"
"uthentication.\n"
"you can input user name and password with [`Session:css_select`][session-css-s"
"elect] and [`ElementSet:send_keys`][elementset-send-keys].\""
msgstr ""
"次にこのWebサイトは認証が必要なので、ユーザー名とパスワードを入力します。\n"
"[`Session:css_select`][session-css-select]と[`ElementSet:send_keys`][elementset"
"-send-keys]を使ってユーザー名とパスワードを入力できます。\n"

msgid ""
"you get element object for inputting user name and password with [`Session:css"
"_select`][session-css-select].\n"
"In this example get element object with the CSS selector, however, you can als"
"o get it using the XPath with [`Session:xpath_search`][session-xpath-search]."
msgstr ""
"ユーザー名とパスワードを入力するための要素を[`Session:css_select`][session-css-select]を使って取得します。\n"
"この例では、CSSセレクターを使って要素を取得していますが、[`Session:xpath_search`][session-xpath-search]でX"
"pathを使った取得もできます。"

msgid ""
"you call [`ElementSet:send_keys`][elementset-send-keys] of acquired elementset"
" object.\n"
"You specify input string as the argument of [`ElementSet:send_keys`][elementse"
"t-send-keys]."
msgstr ""
"次に、取得した要素オブジェクトの[`ElementSet:send_keys`][elementset-send-keys]を呼び出します。[`Elemen"
"tSet:send_keys`][elementset-send-keys]の引数には、入力文字列を指定します。"

msgid ""
"Third, you push login button with [`Session:css_select`][session-css-select] a"
"nd [`ElementSet:click`][elementset-click]."
msgstr ""
"次に、[`Session:css_select`] [session-css-select]と[`ElementSet:click`][elementset"
"-click]でログインボタンを押します。"

msgid ""
"Fourth, you click link on website in after login with [`Session:link_search`]["
"session-link-search] and [`ElementSet:click`][elementset-click]."
msgstr ""
"次に、[`Session:link_search`] [session-link-search]と[`ElementSet:click`][elements"
"et-click]を使ってログインした後のWebサイトのリンクをクリックします。"

msgid ""
"Fifth, you get text of specific element in after moved web site with [`Element"
"Set:text`][elementset-text].\n"
"You get element object for getting text with [`Session:css_select`][session-cs"
"s-select].\n"
"you call [`ElementSet:text`][elementset-text] of acquired elementset object.\n"
"You can use acquired value of the text as Lua's string."
msgstr ""
"次に、[`ElementSet:text`][elementset-text]で移動後のWebサイトの特定の要素のテキストを取得します。\n"
"[`Session:css_select`][session-css-select]を使って、テキストを取得する要素を取得します。\n"
"取得した要素の[`ElementSet:text`][elementset-text]を呼び出します。\n"
"取得したテキストの値はLuaの文字列として使えます。"

msgid ""
"local URL =\n"
"  \"https://clear-code.gitlab.io/lua-web-driver/sample/move.html\""
msgstr ""

msgid ""
"-- Make your callback and start session\n"
"driver:start_session(function(session)\n"
"  session:navigate_to(URL)"
msgstr ""
"-- コールバックの作成とセッションの開始\n"
"driver:start_session(function(session)\n"
"  session:navigate_to(URL)"

msgid ""
"-- Get forms in a website\n"
"  local form = session:css_select('form')\n"
"-- Get form for inputting username\n"
"  local text_form = form:css_select('input[name=username]')\n"
"-- Input username to form\n"
"  text_form:send_keys(\"username\")\n"
"-- Get form for inputting password\n"
"  local password_form = form:css_select('input[name=password]')\n"
"-- Input password to form\n"
"  password_form:send_keys(\"password\")"
msgstr ""
"-- Webサイト内のフォームを取得\n"
"  local form = session:css_select('form')\n"
"-- ユーザー名を入力するためのフォームを取得\n"
"  local text_form = form:css_select('input[name=username]')\n"
"-- フォームにユーザー名を入力\n"
"  text_form:send_keys(\"username\")\n"
"-- パスワードを入力するためのフォームを取得\n"
"  local password_form = form:css_select('input[name=password]')\n"
"-- フォームにパスワードを入力\n"
"  password_form:send_keys(\"password\")"

msgid ""
"-- Get button for submitting username and password\n"
"  local button = form:css_select(\"input[type=submit]\")\n"
"-- Submit username and password\n"
"  button:click()"
msgstr ""
"-- ユーザー名とパスワードを送信するためのボタンを取得\n"
"  local button = form:css_select(\"input[type=submit]\")\n"
"-- ユーザー名とパスワードを送信\n"
"  button:click()"

msgid ""
"-- Get element object for link operating\n"
"  local link = session:link_search (\"1\")\n"
"-- Click the link\n"
"  link:click()\n"
"  local elements = session:css_select(\"p\")\n"
"-- Get text of acquired element\n"
"  print(elements:text())\n"
"end)\n"
"```"
msgstr ""
"-- リンク操作をするための要素オブジェクトを取得\n"
"  local link = session:link_search (\"1\")\n"
"-- リンクをクリック\n"
"  link:click()\n"
"  local elements = session:css_select(\"p\")\n"
"-- 取得した要素のテキストを取得\n"
"  print(elements:text())\n"
"end)\n"
"```"

msgid "## Button operation on a specific form {#button-operation-on-specific-form}"
msgstr "## 特定のフォームのボタン操作 {#button-operation-on-specific-form}"

msgid ""
"You can use [`Session:css_select`][session-css-select] and [`ElementSet:click`"
"][elementset-click] to button operation on a specific form."
msgstr ""
"[`Session:css_select`][session-css-select]と[`ElementSet:click`][elementset-cli"
"ck]を使って、特定のフォームのボタンを操作できます。"

msgid "First of all, you visit a website to button operation as below example."
msgstr "まずはじめに、以下の例のようにボタンを操作するWebサイトへアクセスします。"

msgid ""
"Second, you get element object for button operating with [`Session:css_select`"
"][session-css-select].\"\n"
"In this example get element object with the CSS selector, however, you can als"
"o get it using the XPath."
msgstr ""
"次に、[`Session:css_select`][session-css-select]を使って、ボタン操作をするための要素オブジェクトを取得します。\n"
"この例では、CSSセレクターで取得していますが、XPathを使って取得することもできます。"

msgid ""
"Third, you call [`ElementSet:click`][elementset-click] of acquired element obj"
"ect."
msgstr "次に、取得した要素オブジェクトの[`ElementSet:click`][elementset-click]を呼び出します。"

msgid ""
"local URL =\n"
"  \"https://clear-code.gitlab.io/lua-web-driver/sample/button.html\""
msgstr ""

msgid ""
"-- Make your callback and start session\n"
"driver:start_session(function(session)\n"
"  session:navigate_to(URL)\n"
"-- Get elementset object for button operating\n"
"  local elements = session:css_select('#announcement')\n"
"-- Click the acquired button object\n"
"  elements:click()"
msgstr ""
"-- コールバックの作成ｔおセッションの開始\n"
"driver:start_session(function(session)\n"
"  session:navigate_to(URL)\n"
"-- ボタン操作をするための要素を取得\n"
"  local elements = session:css_select('#announcement')\n"
"-- 取得したボタンをクリック\n"
"  elements:click()"

msgid ""
"--Get text of specific element in after moved web site\n"
"  elements = session:css_select('a[name=announcement]')\n"
"  local informations_summary = elements:texts()\n"
"  for _, summary in ipairs(informations_summary) do\n"
"    print(summary)\n"
"  end\n"
"end)\n"
"```"
msgstr ""
"-- 移動後のWebサイトの要素のテキストを取得\n"
"  elements = session:css_select('a[name=announcement]')\n"
"  local informations_summary = elements:texts()\n"
"  for _, summary in ipairs(informations_summary) do\n"
"    print(summary)\n"
"  end\n"
"end)\n"
"```"

msgid "## Input string into specific a form {#input-string-into-form}"
msgstr "## 特定のフォームへの文字列入力 {#input-string-into-form}"

msgid ""
"You can use [`ElementSet:send_keys`][elementset-send-keys] to input string int"
"o specific a form."
msgstr "[`ElementSet:send_keys`][elementset-send-keys]を使って、特定のフォームに文字列を入力できます。"

msgid "First of all, you visit a website to input string into a form."
msgstr "まずはじめに、フォームに文字列を入力するWebサイトへアクセスします。"

msgid ""
"Second, you get element object for inputting string with [`Session:css_select`"
"][session-css-select].\"\n"
"In this example get element object with the CSS selector, however, you can als"
"o get it using the XPath."
msgstr ""
"次に、[`Session:css_select`][session-css-select]を使って、文字列を入力するための要素オブジェクトを取得します。この"
"例では、CSSセレクターで取得していますが、XPathを使って取得することもできます。"

msgid ""
"Third, you call [`ElementSet:send_keys`][elementset-send-keys] of acquired ele"
"ment object.\n"
"You specify input string as the argument of [`ElementSet:send_keys`][elementse"
"t-send-keys]."
msgstr ""
"次に、取得した要素オブジェクトの[`ElementSet:send_keys`][elementset-send-keys]を呼び出します。[`Elemen"
"tSet:send_keys`][elementset-send-keys]の引数には、入力文字列を指定します。"

msgid ""
"local URL =\n"
"  \"https://clear-code.gitlab.io/lua-web-driver/sample/index.html\""
msgstr ""

msgid ""
"-- Make your callback and start session\n"
"driver:start_session(function(session)\n"
"  session:navigate_to(URL)\n"
"-- Get elementset object for inputting string\n"
"  local elements = session:css_select('input[name=name]')\n"
"-- Input string to form\n"
"  elements:send_keys(\"This is test\")\n"
"  print(elements[1].value)\n"
"end)\n"
"```"
msgstr ""
"-- コールバックの作成とセッションの開始\n"
"driver:start_session(function(session)\n"
"  session:navigate_to(URL)\n"
"-- 文字列を入力するための要素を取得\n"
"  local elements = session:css_select('input[name=name]')\n"
"-- フォームに文字列を入力\n"
"  elements:send_keys(\"This is test\")\n"
"  print(elements[1].value)\n"
"end)\n"
"```"

msgid "## Get attribute of element {#get-attribute-element}"
msgstr "## 要素の属性の取得 {#get-attribute-element}"

msgid ""
"You can use [`Element:get_attribute`][element-get-attribute] to get attribute "
"of specific element."
msgstr "[`Element:get_attribute`][element-get-attribute]を使って特定の要素の属性を取得できます。"

msgid ""
"First of all, you get element object for getting attribute with [`Session:css_"
"select`][session-css-select]."
msgstr ""
"まずはじめに、[`Session:css_select`][session-css-select]を使って、属性を取得するための要素オブジェクトを取得します"
"。"

msgid ""
"Second, you call [`Element:get_attribute`][element-get-attribute] of acquired "
"element object.\n"
"You specify attribute name as the argument of [`Element:get_attribute`][elemen"
"t-get-attribute].\n"
"You can use acquired value of the attribute as Lua's string."
msgstr ""
"次に、取得した要素オブジェクトの[`Element:get_attribute`][element-get-attribute]を呼び出します。[`Elem"
"ent:get_attribute`][element-get-attribute]の引数には、属性名を指定します。取得した属性値は、Luaの文字列として使"
"えます。"

msgid ""
"local URL =\n"
"  \"https://clear-code.gitlab.io/lua-web-driver/sample/get-attribute.html\""
msgstr ""

msgid ""
"-- Make your callback and start session\n"
"driver:start_session(function(session)\n"
"  session:navigate_to(URL)\n"
"-- Get elementset object for getting attribute\n"
"  local elements = session:css_select('p')\n"
"  for _, element in ipairs(elements) do\n"
"-- Get attribute of acquired element\n"
"    if element[\"data-value-type\"] == \"number\" then\n"
"      print(element:text())\n"
"    end\n"
"  end\n"
"end)\n"
"```"
msgstr ""
"-- コールバックの作成とセッションの開始\n"
"driver:start_session(function(session)\n"
"  session:navigate_to(URL)\n"
"-- 属性取得するための要素を取得\n"
"  local elements = session:css_select('p')\n"
"  for _, element in ipairs(elements) do\n"
"-- 取得した要素の属性を取得\n"
"    if element[\"data-value-type\"] == \"number\" then\n"
"      print(element:text())\n"
"    end\n"
"  end\n"
"end)\n"
"```"

msgid "## Get text of element {#get-text-element}"
msgstr "## 要素のテキストの取得 {#get-attribute-element}"

msgid ""
"You can use [`ElementSet:text`][elementset-text] to get text of sepecific elem"
"ent."
msgstr "[`ElementSet:text`][elementset-text]を使って特定の要素のテキストを取得できます。"

msgid ""
"First of all, you get element object for getting text with [`Session:css_selec"
"t`][session-css-select]."
msgstr ""
"まずはじめに、[`Session:css_select`][session-css-select]を使って、テキストを取得するための要素オブジェクトを取得し"
"ます。"

msgid ""
"Second, you call [`ElementSet:text`][elementset-text] of acquired element obje"
"ct.\n"
"You can use acquired value of the test as Lua's string."
msgstr ""
"次に、取得した要素オブジェクトの[`ElementSet:text`][elementset-text]を呼び出します。取得したテキストの値は、Luaの文字"
"列として使えます。"

msgid ""
"-- Make your callback and start session\n"
"driver:start_session(function(session)\n"
"  session:navigate_to(URL)\n"
"-- Get elementset object for getting text\n"
"  local element_set = session:css_select('#p2')\n"
"-- Get text of acquired element\n"
"  local text = element_set:text()\n"
"  print(text)\n"
"end)\n"
"```"
msgstr ""
"-- コールバックの作成とセッションの開始\n"
"driver:start_session(function(session)\n"
"  session:navigate_to(URL)\n"
"-- テキストを取得するための要素を取得\n"
"  local element_set = session:css_select('#p2')\n"
"-- 取得した要素のテキストを取得\n"
"  local text = element_set:text()\n"
"  print(text)\n"
"end)\n"
"```"

msgid "## Multithread {#multi-thread}"
msgstr "## マルチスレッド {#multi-thread}"

msgid ""
"You can use LuaWebDriver with multiple threads. You need use [`web-driver.Thre"
"adPool`][thread-pool] object for using LuaWebDriver with multiple threads as b"
"elow."
msgstr ""
"複数のスレッドでLuaWebDriverを使えます。LuaWebDriverを複数のスレッドで使うためには、以下のように[`web-driver.Threa"
"dPool`][thread-pool]オブジェクトを使う必要があります。"

msgid ""
"Here is an example crawl on web pages with a URL given to argument of [`web-dr"
"iver.ThreadPool:push()`][thread-pool-push] as the start point."
msgstr ""
"以下の例では、[`web-driver.ThreadPool:push()`][thread-pool-push]の引数に与えられたURLを起点にWebペー"
"ジをクロールします。"

msgid ""
"```lua\n"
"local web_driver = require(\"web-driver\")\n"
"local log = require(\"log\")"
msgstr ""

msgid "local log_level = \"notice\""
msgstr ""

msgid ""
"local logger = log.new(log_level)\n"
"local function crawler(context)\n"
"  local web_driver = require(\"web-driver\")\n"
"  local logger = context.logger\n"
"  local session = context.session\n"
"  local url = context.job\n"
"  local prefix = url:match(\"^https?://[^/]+/\")\n"
"  logger:debug(\"Opening...: \" .. url)\n"
"  session:navigate_to(url)\n"
"  logger:notice(string.format(\"%s: Title: %s\",\n"
"                              url,\n"
"                              session:title()))\n"
"  local anchors = session:css_select(\"a\")\n"
"  local anchor\n"
"  for _, anchor in pairs(anchors) do\n"
"    local href = anchor.href\n"
"    local normalized_href = href:gsub(\"#.*$\", \"\")\n"
"    logger:notice(string.format(\"%s: Link: %s (%s): %s\",\n"
"                                url,\n"
"                                href,\n"
"                                normalized_href,\n"
"                                anchor:text()))\n"
"    if normalized_href:sub(1, #prefix) == prefix then\n"
"      context.job_pusher:push(normalized_href)\n"
"    end\n"
"  end\n"
"end\n"
"local pool = web_driver.ThreadPool.new(crawler, {logger = logger})\n"
"logger.debug(\"Start crawling: \" .. URL)\n"
"pool:push(URL)\n"
"pool:join()\n"
"logger.debug(\"Done crawling: \" .. URL)\n"
"```"
msgstr ""

msgid ""
"You can write the processing you want to execute in the function given to argu"
"ment of [`web-driver.ThreadPool.new()`][thread-pool-new]."
msgstr ""
"[`web-driver.ThreadPool.new()`][thread-pool-new]の引数に与えられた関数内に実行したい処理を書くことができます"
"。"

msgid ""
"By executing [`web-driver.JobPusher:push()`][job-pusher-push] ([`web-driver.Jo"
"bPusher:push()`][job-pusher-push] is `context.job_pusher:push()` in the above "
"example) in a function given to argument of [`web-driver.ThreadPool.new()`][th"
"read-pool-new], the idle thread executes job one by one."
msgstr ""
"[`web-driver.ThreadPool.new()`][thread-pool-new]の引数に与えられた関数内で[`web-driver.JobP"
"usher:push()`][job-pusher-push](上の例では、`context.job_pusher:push()`です。)を呼び出すことによ"
"って、空いているスレッドがジョブを順に処理します。"

msgid ""
"Number of argument of a function given to argument of [`web-driver.ThreadPool."
"new()`][thread-pool-new] is one. (The function given to argument of [`web-driv"
"er.ThreadPool.new()`][thread-pool-new] is `crawler` in the above example.)\n"
"This argument has all informations for crawl on web pages. (The argument is `c"
"ontext` in the above example.)"
msgstr ""
"[`web-driver.ThreadPool.new()`][thread-pool-new]の引数に与えられる関数の引数の数は1つです。(上の例で、[`"
"web-driver.ThreadPool.new()`][thread-pool-new]の引数に与えられる関数は`crawler`です。)\n"
"この引数は、Webページをクロールするための情報が入っています。(上の例では、この引数は`context`です。)"

msgid "If you register the same job, LuaWebDriver ignores the same job by default."
msgstr "同じジョブを登録した場合、LuaWebDriverはデフォルトで同じジョブを無視します。"

msgid "A job only recives the string. We suggest give URL to the job."
msgstr "ジョブは、文字列のみ受け取れます。ジョブには、URLを与えることをおすすめします。"

msgid ""
"A failed job retry automatically. A Number of retries are three by default.\n"
"If a job failed beyond the number of retries, LuaWebDriver deletes it."
msgstr ""
"失敗したジョブは自動的にリトライします。リトライ回数はデフォルトで3回です。\n"

msgid ""
"You can also specify the number of retries as an argument of [`web-driver.Thre"
"adPool.new()`][thread-pool-new] as below."
msgstr ""
"以下のように[`web-driver.ThreadPool.new()`][thread-pool-new]の引数として、リトライ回数を指定することもできま"
"す。"

msgid ""
"```lua\n"
"local pool = web_driver.ThreadPool.new(crawler, {max_n_failures = 5})\n"
"```"
msgstr ""

msgid "Some notes as below for use LuaWebDriver with multiple threads"
msgstr "LuaWebDriverを複数のスレッドで使うには、以下のような注意が必要です。"

msgid ""
"* When starting a thread, LuaWebDriver currently sometimes crash.\n"
"  * This problem might resolve by specifying `libpthread.so` to `LD_PRELOAD`."
msgstr ""
"* 現在、スレッド起動時にLuaWebDriverがクラッシュすることがあります。\n"
"  * この問題は、`libpthread.so`を`LD_PRELOAD`に指定することで解消する可能性があります。"

msgid ""
"* LuaWebDriver has not common information between each thread.\n"
"  * If you want to use common information in each thread, you use environment "
"value or read a file saved common information.\n"
"  * For example, known information (like login information etc) is saved a fil"
"e and it becomes easy to access by reading that file in the thread."
msgstr ""
"* LuaWebDriverは各スレッド間で共通の情報を持ちません。\n"
"  * もし、各スレッドで共通の情報を使いたい場合は、環境変数を使うか共通の情報を保存したファイルを読み込んで下さい。\n"
"  * 例えば、既知の情報(ログイン情報等)は、ファイルに保存し、そのファイルをスレッド内で読み込むことでアクセスしやすくなります。"

msgid ""
"* We have supposed execute one web page every one call basically. But if you p"
"rocessing a web page requiring a login, you should also do the after login pro"
"cessing on the same thread.\n"
"  * Because it keeps login status by reusing session in the thread."
msgstr ""
"* 基本的に1回の呼び出し毎に1つのWebページを処理する想定ですが、ログインが必要なWebページを処理する場合は、同じスレッドでログイン後の処理も実行した"
"ほうが良いです。\n"
"  * スレッド内でセッションを再使用することで、ログイン状態を維持しているためです。"

msgid ""
"* A function given to argument of [`web-driver.ThreadPool.new()`][thread-pool-"
"new] must not reference information of external of one."
msgstr ""
"* [`web-driver.ThreadPool.new()`][thread-pool-new]の引数として与えられる関数は、その関数の外部の情報を参照"
"してはいけません。"

msgid ""
"* You should not make too many threads. Because eache thread becomes slow due "
"to start the Firefox every each thread.\n"
"  * Guide to the number of a thread is one-third of the number of physical CPU"
" core."
msgstr ""
"* スレッドは作りすぎないほうが良いです。スレッド毎にFirefoxを起動するので、動作が遅くなるためです。\n"
"  * スレッド数の目安は、物理CPUがコア数の1/3です。"

msgid ""
"* LuaWebDriver can't resume a job.\n"
"  * If you quit `luajit` process in the middle, the job executes from the begi"
"nning. A check of a duplicate job is reset also."
msgstr ""
"* LuaWebDriverは、ジョブを中断できません。\n"
"  * `luajit`プロセスを途中で終了した場合、ジョブは最初から実行されます。ジョブの重複チェックもリセットされます。"

msgid ""
"* You need not implement end processing for each thread especially. Because if"
" end processing for each thread execute in [`web-driver.ThreadPool:join()`][th"
"read-pool-join]."
msgstr ""
"* 各スレッドを終了する処理は特に実装する必要はありません。[`web-driver.ThreadPool:join()`][thread-pool-joi"
"n]内で各スレッドの終了処理を実行しているためです。"

msgid "## Next step {#next-step}"
msgstr "## 次のステップ {#next-step}"

msgid ""
"Now, you knew all major LuaWebDriver features! If you want to understand each "
"feature, see [reference manual][reference] for each feature."
msgstr ""
"これで、LuaWebDriverのすべての主な機能を学びました！それぞれの機能をより理解したい場合は、各機能の[リファレンスマニュアル][reference"
"]を見てください。"

msgid "[install]:../install/"
msgstr ""

msgid "[webdriver-create]:../reference/webdriver.html#create"
msgstr ""

msgid "[firefoxdriver-start]:../reference/firefoxdriver.html#start"
msgstr ""

msgid "[firefoxdriver-stop]:../reference/firefoxdriver.html#stop"
msgstr ""

msgid "[firefox-start-session]:../reference/firefox.html#start_session"
msgstr ""

msgid "[session-navigate-to]:../reference/session.html#navigate_to"
msgstr ""

msgid "[session-xml]:../reference/session.html#xml"
msgstr ""

msgid "[session-save-screenshot]:../reference/session.html#save_screenshot"
msgstr ""

msgid "[session-back]:../reference/session.html#back"
msgstr ""

msgid "[session-forward]:../reference/session.html#forward"
msgstr ""

msgid "[session-accept-alert]:../reference/session.html#accept_alert"
msgstr ""

msgid "[session-dismiss-alert]:../reference/session.html#dismiss_alert"
msgstr ""

msgid "[session-css-select]:../reference/session.html#css_select"
msgstr ""

msgid "[session-xpath-search]:../reference/session.html#xpath_search"
msgstr ""

msgid "[session-link-search]:../reference/session.html#link_search"
msgstr ""

msgid "[elementset-send-keys]:../reference/elementset.html#send_keys"
msgstr ""

msgid "[elementset-click]:../reference/elementset.html#click"
msgstr ""

msgid "[elementset-text]:../reference/elementset.html#text"
msgstr ""

msgid "[element-get-attribute]:../reference/element.html#get_attribute"
msgstr ""

msgid "[element-text]:../reference/element.html#text"
msgstr ""

msgid "[thread-pool]:../reference/thread-pool.html"
msgstr ""

msgid "[thread-pool-new]:../reference/thread-pool.html#new"
msgstr ""

msgid "[thread-pool-push]:../reference/thread-pool.html#push"
msgstr ""

msgid "[thread-pool-join]:../reference/thread-pool.html#join"
msgstr ""

msgid "[job-pusher-push]:../reference/job-pusher.html#push"
msgstr ""

msgid "[reference]:../reference/"
msgstr ""
